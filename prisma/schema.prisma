generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Utente {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  nome                  String
  cognome               String
  email                 String            @unique
  codiceFiscale         String            @unique
  passwordHash          String
  ruolo                 Ruolo
  totpSecret            String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  unitaLocali           UnitaLocale[]     @relation("ProprietarioUnita")
  unitaLocaliDelegate   UnitaLocale[]     @relation("DelegatiUnita", fields: [unitaLocaliDelegateId], references: [id])
  bundle                Bundle[]          @relation("ProprietarioBundle")
  unitaLocaliDelegateId String[]          @db.ObjectId
  luoghiDiProduzione    LuogoProduzione[]
  anagrafiche           Anagrafica[]
}

model UnitaLocale {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  nome             String
  comune           String
  cap              String
  nazione          String         @default("Italia")
  indirizzo        String
  n_civico         String
  provincia        String
  regione          String
  tipiAttivita     TipoAttivita[]
  proprietarioId   String         @db.ObjectId
  proprietario     Utente         @relation("ProprietarioUnita", fields: [proprietarioId], references: [id])
  utentiDelegati   Utente[]       @relation("DelegatiUnita", fields: [utentiDelegatiId], references: [id])
  utentiDelegatiId String[]       @db.ObjectId
  registri         Registro[]
}

enum TipoAnagrafica {
  TRASPORTATORE
  DESTINATARIO
  PRODUTTORE
  INTERMEDIARIO
}

model Anagrafica {
  id                             String          @id @default(auto()) @map("_id") @db.ObjectId
  tipoAnagrafica                 TipoAnagrafica
  denominazione                  String
  codiceFiscale                  String
  nIscrizioneAlbo                String
  nAutorizzazione                String
  nazione                        String
  utente                         Utente          @relation(fields: [utenteId], references: [id])
  utenteId                       String          @db.ObjectId
  RegistrazioneComeTrasportatore Registrazione[] @relation("TrasportatoreRifuto")
  RegistrazioneComeDestinatario  Registrazione[] @relation("DestinatarioRifiuto")
  RegistrazioneComeIntermediario Registrazione[] @relation("IntermediarioRifiuto")
  RegistrazioneComeProduttore    Registrazione[] @relation("ProduttoreRifiuto")
}

model LuogoProduzione {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  nome          String
  indirizzo     String
  civico        String
  cap           String
  nazione       String
  provincia     String
  regione       String
  comune        String
  utente        Utente          @relation(fields: [utenteId], references: [id])
  utenteId      String          @db.ObjectId
  registrazioni Registrazione[]

  @@map("LuogoDiProduzione")
}

model Registro {
  id                 String          @id @default(auto()) @map("_id") @db.ObjectId
  descrizione        String
  isAttivo           Boolean
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @default(now())
  progressivoCounter Int
  tipiAttivita       TipoAttivita[]
  unitaLocale        UnitaLocale     @relation(fields: [unitaLocaleId], references: [id])
  unitaLocaleId      String          @db.ObjectId
  registrazioni      Registrazione[]
}

model Registrazione {
  id                                   String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                            DateTime         @default(now())
  progressivo                          String
  dataOraRegistrazione                 DateTime
  isTrasmessa                          Boolean          @default(false)
  tipoOperazione                       String?
  tipoAttivita                         String
  causaleOperazione                    String?
  numeroRegistrazionePubblicaSicurezza String?
  dataRegistrazionePubblicaSicurezza   DateTime?
  isIntegratoFIR                       Boolean          @default(false)
  numeroFIR                            String?
  trasportoFrontaliero                 Boolean          @default(false)
  tipoTrasportoFrontaliero             String?
  dataInizioTrasporto                  DateTime?
  dataFineTrasporto                    DateTime?
  isVeicoloFuoriUso                    Boolean          @default(false)
  isConferito                          Boolean          @default(false)
  pesoADestino                         Float?
  isRespinto                           Boolean          @default(false)
  tipologiaRespingimento               String?
  quantitaRespingimento                Float?
  unitaDiMisuraRespingimento           String?
  causaleRespingimento                 String?
  causaleRespingimentoDesc             String?
  registrazioniFiglie                  String[]         @db.ObjectId
  annotazioni                          String
  isStoccaggioInstant                  Boolean          @default(false)
  dataCalcoloStoccaggio                DateTime?
  trasportatore                        Anagrafica?      @relation("TrasportatoreRifuto", fields: [trasportatoreId], references: [id])
  trasportatoreId                      String?          @db.ObjectId
  destinatario                         Anagrafica?      @relation("DestinatarioRifiuto", fields: [destinatarioId], references: [id])
  destinatarioId                       String?          @db.ObjectId
  intermediario                        Anagrafica?      @relation("IntermediarioRifiuto", fields: [intermediarioId], references: [id])
  intermediarioId                      String?          @db.ObjectId
  luogoDiProduzione                    LuogoProduzione? @relation(fields: [luogoDiProduzioneId], references: [id])
  luogoDiProduzioneId                  String?          @db.ObjectId
  produttore                           Anagrafica?      @relation("ProduttoreRifiuto", fields: [produttoreId], references: [id])
  produttoreId                         String?          @db.ObjectId
  rifiuto                              Rifiuto
  registro                             Registro?        @relation(fields: [registroId], references: [id])
  registroId                           String           @db.ObjectId
}

model Bundle {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  encodedBundle   String?
  passkey         String?
  extractedBundle Bytes?
  proprietarioId  String @unique @db.ObjectId
  proprietario    Utente @relation("ProprietarioBundle", fields: [proprietarioId], references: [id])
}

type Rifiuto {
  codiceEER           String
  provenienzaRifiuto  String?
  descrizione         String?
  statoFisicoRifiuto  String
  pericoloRifiuto     String?
  quantita            Float
  unitaDiMisura       String
  categoriaRAAE       String[]
  destinazioneRifiuto String?
}

enum Ruolo {
  ADMIN
  USER
}

type TipoAttivita {
  attivita      String
  codiciRifiuto String[]
}
